<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="voc">

	<update id="vocCustUpdate" parameterType="custDto" >
	UPDATE CU100010
	SET
	EDITUSER = #{edituser}
	,EDITDATE = NOW()
	,CUSTNAME = #{custname}
	,CUSTGUBUN = #{custgubun}
	,MOBILE1 = #{mobile1}
	,MOBILE2 = #{mobile2}
	,MOBILE3 = #{mobile3}
	,HOMTEL1 = #{homtel1}
	,HOMTEL2 = #{homtel2}
	,HOMTEL3 = #{homtel3}
	,RELCUSTNO = #{relcustno}
	,EMAIL = #{email}
	,CUSTGRADE = #{custgrade}
	,HOMADDR1 = #{homaddr1}
	,HOMADDR2 = #{homaddr2}
	,HOMADDR3 = #{homaddr3}

	WHERE
		CUSTNO = #{custno}
		AND SITEID = #{siteid}
	</update>

	<!-- VOC 고객 수신거부 정보 수정 -->
	<update id="vocCustDenyUpdate" parameterType="custDenyDto" >
	UPDATE CU100080
	SET
	EDITUSER = #{edituser}
	,EDITDATE = NOW()

	,DENYMAILNOMAL = #{denymailnomal}
	,DENYMAILSURVEY = #{denymailsurvey}
	,DENYSMSNOMAL = #{denysmsnomal}
	,DENYSMSSURVEY = #{denysmssurvey}
	,DENYDMNOMAL = #{denydmnomal}
	,DENYDMSURVEY = #{denydmsurvey}

	WHERE
		CUSTNO = #{custno}
	</update>

	<!-- voc 블랙 추가 -->
	<insert id="vocBlackCustInsert" parameterType="blackCustDto">
		INSERT INTO cu120010
		(
			CUSTNO
			,BLACKTYPE
			,RECEIVENO
			,MEMO
			,REGDATE
			,REGUSER
			,ISDELETE
			,SITEID
		)
		VALUES
		(
			#{custno}
			,#{blacktype}
			,#{receiveno}
			,#{memo}
			,NOW()
			,#{reguser}
			,0
			,#{siteid}
		)
	</insert>
	<!-- 블랙삭제-->
	<update id="vocBlackCustDelete" parameterType="blackCustDto">
		UPDATE CU120010
		SET
		EDTUSER = #{edtuser}
		,EDTDATE = NOW()
		,ISDELETE = 1
		WHERE
			CUSTNO = #{custno}
			AND SITEID = #{siteid}
			AND ISDELETE = 0
	</update>

	<!-- 블랙이력 조회 -->
	<select id="blackHistoryList" parameterType="hashMap" resultType="hashMap">
		SELECT A.BCUSTNO,A.CUSTNO,A.BLACKTYPE
		,CASE WHEN A.BLACKTYPE = 1 THEN '욕설'
			WHEN A.BLACKTYPE = 2 THEN '성희롱'
			WHEN A.BLACKTYPE = 3 THEN '기타'
			ELSE ''
		END AS BLACKTYPE_
		,A.RECEIVENO
		,IFNULL(A.MEMO,'') AS MEMO
		,DATE_FORMAT(A.REGDATE,'%Y-%m-%d %H:%m:%i') AS REGDATE_
		,CASE WHEN IFNULL(A.ISDELETE = 1,0) THEN CONCAT(DATE_FORMAT(A.EDTDATE,'%Y-%m-%d'),' / ','해제')
			ELSE '블랙'
			END AS ISDELETE_
		,B.USERNAME
		,CASE WHEN CHAR_LENGTH(A.MEMO) <![CDATA[>=]]> 20 THEN CONCAT( SUBSTRING(A.MEMO,1,17) ,'...' )
			ELSE IFNULL(A.MEMO,'')
			END AS MEMO_
		FROM CU120010 A
		LEFT OUTER JOIN ME800010 B ON A.REGUSER = B.USERNO
		WHERE
			A.CUSTNO = #{custno}
			AND A.SITEID = #{siteid}
	</select>

	<!-- 콜백 히스토리 리스트 (고객) -->
	<select id="callBackHistoryList" parameterType="hashMap" resultType="hashMap">
		SELECT A.CALLBACKHISTNO, A.CALLBACKNO, B.CALLER, B.CALLBACK, A.REQNO
		,B.GCODE1, B.GCODE2, B.GCODE3
		,DATE_FORMAT(B.RECEIVEDATE,'%Y-%m-%d %H:%i') AS RECEIVEDATE_
		,DATE_FORMAT(A.REGDATE,'%Y-%m-%d %H:%i') AS REGDATE_
		,A.CALLSTATUS
		,(CASE
		WHEN A.CALLSTATUS = 0 THEN '접수'
		WHEN A.CALLSTATUS = 1 THEN '할당'
		WHEN A.CALLSTATUS = 2 THEN '완료'
		WHEN A.CALLSTATUS = 3 THEN '통화불가'
		WHEN A.CALLSTATUS = 4 THEN '미해결'
		ELSE ''
		END) AS CALLSTATUS_
		,C.USERNAME
		,IFNULL(A.MEMO,'') AS MEMO
		,CASE WHEN CHAR_LENGTH(A.MEMO) <![CDATA[>=]]> 10 THEN CONCAT( SUBSTRING(A.MEMO,1,10) ,'...' )
		ELSE IFNULL(A.MEMO,'')
		END AS MEMO_
		,D.RECDATE, D.RECEXT, D.RECFILENAME
		,REPLACE(D.RECDATE,'-','') AS RECDATE_
		FROM CTI510020 A
		LEFT OUTER JOIN CTI510010 B ON A.CALLBACKNO = B.CALLBACKNO
		LEFT OUTER JOIN ME800010 C ON A.REGUSER = C.USERNO
		LEFT OUTER JOIN CTI510030 D ON A.REQNO = D.REQNO
		WHERE
			A.CUSTNO = #{custno}
			AND A.SITEID = #{siteid}
	</select>

	<!-- 상담원 콜백리스트 : 할당 되었으며 아직 해결되지 않은 콜백 목록 -->
	<select id="vocCallBackList" parameterType="hashMap" resultType="hashMap">

		SELECT
		A.CALLBACKNO, A.CALLER, A.CALLBACK, A.TRUNK, IFNULL(A.CALLCOUNT,'') AS CALLCOUNT
		,A.GCODE1, A.GCODE2, A.GCODE3
		,DATE_FORMAT(A.RECEIVEDATE,'%Y-%m-%d %H:%i') AS RECEIVEDATE_
		,DATE_FORMAT(A.CALLDATE,'%Y-%m-%d %H:%i') AS CALLDATE_
		,A.CALLSTATUS
		,(CASE
		WHEN CALLSTATUS = 0 THEN '접수'
		WHEN CALLSTATUS = 1 THEN '할당'
		WHEN CALLSTATUS = 2 THEN '완료'
		WHEN CALLSTATUS = 3 THEN '통화불가'
		WHEN CALLSTATUS = 4 THEN '미해결'
		ELSE ''
		END) AS CALLSTATUS_
		,A.CALLUSER
		,IFNULL(A.CUSTNO,'') AS CUSTNO ,B.USERNAME
		,IFNULL(A.MEMO,'') AS MEMO
		FROM CTI510010 A
		LEFT OUTER JOIN ME800010 B ON A.CALLUSER = B.USERNO
		INNER JOIN (SELECT @RNUM := 0) R
		WHERE
			IFNULL(A.CALLCOUNT,0) <![CDATA[<]]> 4
			AND A.TRUNK = #{ctitelno}
			AND A.CALLUSER = #{userno}
			AND A.CALLSTATUS = 1

	</select>

    <!-- 상담원 콜백처리 -->
	<update id="vocCallBackUpdate" parameterType="hashMap">
	UPDATE CTI510010
	SET
	CALLSTATUS = #{callstatus}
	,CALLCOUNT = IFNULL(CALLCOUNT,0) +1
	,CALLUSER = #{userno}
	,CALLDATE = now()

	WHERE
		CALLBACKNO = #{callbackno}
		AND TRUNK = #{trunk}
	</update>

	<!-- 콜백 내역 추가 -->
	<insert id="vocCallBackHistoryInsert" parameterType="hashMap">
	INSERT INTO CTI510020
	(
	SITEID
	,REGDATE
	,REGUSER
	,CALLBACKNO
	,MEMO
	,CUSTNO
	,CALLSTATUS
	,TRUNK
	,REQNO
	)
	VALUES
	(
	#{siteid}
	,now()
	,#{userno}
	,#{callbackno}
	,#{memo}
	,#{custno}
	,#{callstatus}
	,#{trunk}
	,#{reqno}
	)
	</insert>

	<!-- 녹취 추가 -->
	<insert id="recInsert" parameterType="hashMap">
	INSERT INTO CTI510030
	(
	REQNO
	,RECDATE
	,RECEXT
	,RECFILENAME
	)VALUES(
	#{reqno}
	,#{recdate}
	,#{recext}
	,#{recfilename}
	)
	</insert>

	<!-- CTI서버 콜백 접수 -->
	<insert id="vocCallBack" parameterType="hashMap">

		INSERT INTO CTI510010
		(
		CALLER
		,TRUNK
		,CALLBACK
		,GCODE1
		,GCODE2
		,GCODE3
		,RECEIVEDATE
		,DTWEEK
		,CALLSTATUS
		,CALLCOUNT
		)
		VALUES
		(
		#{CALLER}
		,#{TRUNK}
		,#{CALLBACK}
		,#{GCODE1}
		,#{GCODE2}
		,#{GCODE3}
		,CONCAT(#{DATE1},' ',#{TIME1})
		,#{DTWEEK}
		,#{callstatus}
		,#{callcount}
		)
	</insert>

	<!-- 최근 한건의 상담 접수
	<select id="topList" parameterType="hashMap" resultType="hashMap">
		SELECT SERVICENO,SERVICETYPE,SERVICESTEP,SERVICEDESC,MEMO,SERVICENAME
				,SERVICECODE1
				, FN_GETCODEUPPER('SERVICECODE2',SERVICECODE2,#{siteid},FN_GETCODENO('SERVICECODE1',SERVICECODE1,#{siteid})) AS SERVICECODE2
		 FROM sv300010
		WHERE SITEID = #{siteid}
		AND CUSTNO = #{custno}
		order by SERVICENO DESC
		LIMIT 1
	</select> -->
	<!-- 최근 한건의 상담 접수-->
	<select id="topList" parameterType="hashMap" resultType="hashMap">
		SELECT SERVICENO,SERVICETYPE,SERVICESTEP,SERVICEDESC,MEMO,SERVICENAME
				,SERVICECODE1
				,SERVICECODE2
				, FN_GETCODEUPPER('SERVICECODE2',SERVICECODE2,#{siteid},FN_GETCODENO('SERVICECODE1',SERVICECODE1,#{siteid})) AS SERVICECODE2_
		 FROM sv300010
		WHERE SITEID = #{siteid}
		AND CUSTNO = #{custno}
		order by SERVICENO DESC
		LIMIT 1
	</select>
	<!-- 최근 한건의 상담예약 -->
	<select id="topReserv" parameterType="hashMap" resultType="hashMap">
		SELECT * FROM sv300070
		WHERE SITEID = #{siteid}
		and SERVICENO = #{serviceno}
		ORDER BY NO DESC
		LIMIT 1
	</select>

	<!--  최근 한건의 이관 -->
	<select id="topConvey" parameterType="hashMap" resultType="hashMap">
		SELECT A.*,(SELECT USERNAME FROM me800010 WHERE USERNO = A.NEXTOWNER ) AS NEXTOWNER_ FROM sv300050 A
		WHERE A.SITEID = #{siteid}
		AND A.SERVICENO = #{serviceno}
		ORDER BY A.CONVEYNO DESC
		LIMIT 1
	</select>

	<!--  최근 한건의 현상파악 -->
	<select id="topReward" parameterType="hashMap" resultType="hashMap">
		SELECT DATE_FORMAT(A.VISITDATE,'%Y-%m-%d') AS VISITDATE,A.VISITADDR1,A.VISITADDR2,A.VISITADDR3,A.OWNER
				,(SELECT USERNAME FROM me800010 WHERE USERNO = A.OWNER) AS OWNER_ FROM sv300030 A
		WHERE A.SITEID = #{siteid}
		AND A.SERVICENO = #{serviceno}
		ORDER BY A.REWARDNO DESC
		LIMIT 1
	</select>

	<select id="svProductRead" parameterType="hashMap" resultType="hashMap">
		SELECT PRODUCTB,PRODUCTM,PRODUCTS
		,FN_PRODUCT(PRODUCTB,#{siteid}) AS PRODUCTBNAME
		,FN_PRODUCT(PRODUCTM,#{siteid}) AS PRODUCTMNAME
		,FN_PRODUCT(PRODUCTS,#{siteid}) AS PRODUCTSNAME
		,(SELECT COUNT(*) FROM sv300060 where siteid = #{siteid} and serviceno = #{serviceno}) AS CNT
		 FROM SV300060
		WHERE SITEID = #{siteid}
		AND SERVICENO = #{serviceno}
	</select>

	<insert id="svInsert" parameterType="serviceDto">

		INSERT INTO sv300010
		(
		SERVICENAME
		,SERVICEDESC
		,SERVICEOWNER
		,RECEPTIONDATE
		,CUSTNO
		,CLINO
		,SERVICESTEP
		,OWNER
		,SITEID
		,FILESEARCHKEY
		,REGDATE
		,REGUSER
		,EDTDATE
		,EDTUSER
		,SERVICETYPE
		,SERVICECODE1
		,SERVICECODE2
		,SERVICECHANNEL
		,ISDELETE
		,MEMO
		,COMPLETE
		,REQNO
		)VALUES(
		#{servicename}
		,#{servicedesc}
		,#{serviceowner}
		,#{receptiondate}
		,#{custno}
		,#{clino}
		,#{servicestep}
		,#{owner}
		,#{siteid}
		,#{filesearchkey}
		,NOW()
		,#{reguser}
		,NOW()
		,#{edtuser}
		,#{servicetype}
		,#{servicecode1}
		,#{servicecode2}
		,#{servicechannel}
		,#{isdelete}
		,#{memo}
		,#{complete}
		,#{reqno}
		)
		<selectKey keyProperty="serviceno"  resultType="integer" order="AFTER">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>

	<update id="svStep" parameterType="int">
		UPDATE sv300010
			SET SERVICESTEP = #{servicestep}
		WHERE SERVICENO = #{serviceno}
		AND SITEID = #{siteid}
	</update>

	<insert id="svReservInsert" parameterType="hashMap">
		INSERT INTO sv300070
		(
		SERVICENO
		,MOBILENO
		,RESERVDATE
		,RESERVTIMETO
		,RESERVTIMEFROM
		,COMPLETE
		,REGDATE
		,REGUSER
		,EDTDATE
		,EDTUSER
		,SITEID
		)VALUES(
		#{serviceno}
		,#{reservphone}
		,#{reservdate}
		,#{reservtimeto}
		,#{reservtimefrom}
		,#{complete}
		,NOW()
		,#{reguser}
		,NOW()
		,#{edtuser}
		,#{siteid}
		)
	</insert>




	<insert id="conveyInsert" parameterType="serviceDeliveryDto">
		INSERT INTO sv300050
			(SERVICENO
			,PREVOWNER
			,NEXTOWNER
			,CONVEYREASON
			,CONVEYDATE
			,CONVEYDESC
			,REGDATE
			,REGUSER
			,EDTDATE
			,EDTUSER
			,SITEID
			)VALUES(
			#{serviceno}
			,#{prevowner}
			,#{nextowner}
			,#{conveyreason}
			,#{conveydate}
			,#{conveydesc}
			,NOW()
			,#{reguser}
			,NOW()
			,#{edtuser}
			,#{siteid}
			);

			UPDATE sv300010
			SET OWNER = #{nextowner}
				,EDTDATE = NOW()
				,EDTUSER = #{edtuser}
			WHERE SERVICENO = #{serviceno}
			AND SITEID = #{siteid};

			UPDATE sv300010
			SET SERVICESTEP = 5
			WHERE SERVICENO = #{serviceno}
			AND SITEID = #{siteid};
	</insert>

	<insert id="endCall" parameterType="hashMap">
		INSERT INTO CTI510040
		(
			USERNO,
			SITEID,
			TRANSFERTRYCNT,
			TRANSFERCONNECTCNT,
			IBTRYCNT,
			IBCONNECTCNT,
			OBTRYCNT,
			OBCONNECTCNT,
			AVGCALL,
			AVGWAIT,
			SUMCALL,
			RESPONSERATE,
			REGDATE
		)VALUES(
			#{userno},
			#{siteid},
			#{transferTryCnt},
			#{transferConnectCnt},
			#{ibTryCnt},
			#{ibConnectCnt},
			#{obTryCnt},
			#{obConnectCnt},
			#{avgCall},
			#{avgWait},
			#{sumCall},
			#{ResponseRate},
			CURRENT_TIMESTAMP()
		)
	</insert>

	<!--분배할 콜백리스트 -->
	<select id="popCallBackList" parameterType="hashMap" resultType="hashMap">
		SELECT
		A.CALLBACKNO
		,A.CALLER
		,A.TRUNK
		,A.CALLBACK
		,DATE_FORMAT(A.RECEIVEDATE,'%Y-%m-%d') AS RECEIVEDATE_
		,A.CALLCOUNT
		,(SELECT USERNAME FROM ME800010 WHERE SITEID = 1 AND USERNO = A.CALLUSER) AS CALLUSER_

		FROM CTI510010 A
		WHERE
			TRUNK = (SELECT CTITELNO FROM MA900010 WHERE SITEID = #{siteid})
			AND (CALLUSER IS NULL
			OR IFNULL(CALLCOUNT,0) <![CDATA[<=]]> 3)
			AND CALLSTATUS IN (0,3)
	</select>

	<!-- 콜백분배 -->
	<update id="callBackPassDiv" parameterType="hashMap">
		UPDATE CTI510010
		SET CALLUSER = #{userNo}
		,CALLSTATUS = 1
		WHERE CALLBACKNO IN
		<foreach collection="callBackNo" item="type" index="index" open="(" separator="," close=")">
			#{type}
		</foreach>
	</update>

	<select id="vocCallUserCnt" parameterType="hashMap" resultType="int">
		SELECT COUNT(*) AS CNT FROM ME800010
		WHERE SITEID = #{siteid}
		<!--  AND ROLE = #{role} -->
		<if test="userNo != null">
			AND USERNO =  #{userNo}
		</if>
	</select>

	<select id="vocCallBackTotalRow" parameterType="hashMap" resultType="int">
		SELECT COUNT(*) FROM CTI510010
		WHERE
		TRUNK = (SELECT CTITELNO FROM MA900010 WHERE SITEID = #{siteid})
		AND (CALLUSER IS NULL
		OR IFNULL(CALLCOUNT,0) <![CDATA[<=]]> 3)
		AND CALLSTATUS IN (0,3)
		<if test="callBack != null">
			AND CALLBACK LIKE CONCAT('%',#{callBack},'%')
		</if>
	</select>

	<update id="vocCallBackDiv" parameterType="hashMap">
	UPDATE CTI510010
	SET
	CALLSTATUS = #{callstatus}
	,CALLCOUNT = IFNULL(CALLCOUNT,0) +1
	,CALLUSER = #{userno}
	,CALLDATE = now()

	WHERE
		CALLBACKNO = #{callbackno}
		AND TRUNK = #{trunk}
	</update>


</mapper>